#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Get the next AVD ID
function getNextAvdId() {
  const vulnerabilitiesDir = path.join(__dirname, '../src/data/vulnerabilities');
  const files = fs.readdirSync(vulnerabilitiesDir)
    .filter(file => file.startsWith('AVD-') && file.endsWith('.md'))
    .filter(file => file !== 'README.md');
  
  if (files.length === 0) {
    return 'AVD-2024-001';
  }
  
  // Extract numbers and find the highest
  const numbers = files.map(file => {
    const match = file.match(/AVD-(\d{4})-(\d{3})\.md/);
    if (match) {
      return { year: parseInt(match[1]), num: parseInt(match[2]) };
    }
    return null;
  }).filter(Boolean);
  
  const currentYear = new Date().getFullYear();
  const currentYearVulns = numbers.filter(n => n.year === currentYear);
  
  if (currentYearVulns.length === 0) {
    return `AVD-${currentYear}-001`;
  }
  
  const maxNum = Math.max(...currentYearVulns.map(n => n.num));
  return `AVD-${currentYear}-${String(maxNum + 1).padStart(3, '0')}`;
}

// Template for new vulnerability
function createVulnerabilityTemplate(id, title = '') {
  const today = new Date().toISOString().split('T')[0];
  
  return `---
id: "${id}"
title: "${title || 'Vulnerability Title'}"
description: "Brief description of the vulnerability"
severity: "high"
cvss_score: 7.5
cve_id: null
disclosure_date: "${today}"
discovered_by: "Researcher Name"
affected_systems:
  - "Affected System 1"
  - "Affected System 2"
vulnerability_type: "prompt_injection"
attack_vector: "attack_vector_description"
impact:
  confidentiality: true
  integrity: true
  availability: false
technical_details:
  attack_method: "Description of how the attack works"
  exploitation_complexity: "medium"
  user_interaction: "required"
  scope: "changed"
threat_mapping:
  - "t1"
mitigation_mapping:
  - "m1"
proof_of_concept:
  available: true
  description: "Brief description of the proof of concept"
remediation:
  vendor_response: "Vendor response to the vulnerability"
  workarounds:
    - "Workaround 1"
    - "Workaround 2"
  patch_status: "under_investigation"
references:
  - title: "Reference Title"
    url: "https://example.com"
    type: "blog_post"
tags:
  - "tag1"
  - "tag2"
status: "disclosed"
last_updated: "${today}"
---

# ${title || 'Vulnerability Title'}

## Overview

Provide a comprehensive overview of the vulnerability, including what it is, why it matters, and its potential impact on AI/agentic systems.

## Technical Details

Explain the technical aspects of the vulnerability:

- How the vulnerability works
- The attack vector and methodology
- Prerequisites for exploitation
- Technical complexity

## Attack Scenario

Describe a realistic attack scenario:

1. Step 1 of the attack
2. Step 2 of the attack
3. Step 3 of the attack
4. Final impact

## Impact

Analyze the potential impact:

- **Confidentiality**: Impact on data confidentiality
- **Integrity**: Impact on data/system integrity  
- **Availability**: Impact on system availability
- **Business Impact**: Real-world consequences

## Mitigation Strategies

Provide actionable mitigation strategies:

1. **Immediate Actions**: What to do right now
2. **Short-term Fixes**: Temporary workarounds
3. **Long-term Solutions**: Permanent fixes
4. **Prevention**: How to prevent similar issues

## Detection

How to detect if this vulnerability has been exploited:

- Log patterns to look for
- Behavioral indicators
- Monitoring recommendations

## References and Further Reading

Additional resources for understanding this vulnerability and its implications.
`;
}

// Main function
function main() {
  const args = process.argv.slice(2);
  const title = args.join(' ') || '';
  
  const nextId = getNextAvdId();
  const filename = `${nextId}.md`;
  const filepath = path.join(__dirname, '../src/data/vulnerabilities', filename);
  
  if (fs.existsSync(filepath)) {
    console.error(`‚ùå File ${filename} already exists!`);
    process.exit(1);
  }
  
  const template = createVulnerabilityTemplate(nextId, title);
  
  try {
    fs.writeFileSync(filepath, template);
    console.log(`‚úÖ Created new vulnerability file: ${filename}`);
    console.log(`üìù Edit the file at: src/data/vulnerabilities/${filename}`);
    console.log(`üÜî Vulnerability ID: ${nextId}`);
    
    if (!title) {
      console.log(`üí° Tip: You can provide a title: npm run create-vuln "Your Vulnerability Title"`);
    }
  } catch (error) {
    console.error(`‚ùå Error creating file: ${error.message}`);
    process.exit(1);
  }
}

main(); 
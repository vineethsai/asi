import { useState, useMemo } from "react";
import { Helmet } from "react-helmet";
import { Link } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Icon } from "@/components/ui/icon";
import { 
  Search, 
  Filter, 
  AlertTriangle, 
  Shield,
  ExternalLink, 
  Calendar,
  User,
  Target,
  Bug,
  FileText,
  Github
} from "lucide-react";
import Header from "@/components/layout/Header";
import SidebarNav from "../components/layout/SidebarNav";
import { vulnerabilities, type Vulnerability } from "../lib/vulnerabilityLoader";

export const VulnerabilityDatabase = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedSeverity, setSelectedSeverity] = useState("all");
  const [selectedType, setSelectedType] = useState("all");
  const [selectedStatus, setSelectedStatus] = useState("all");
  const [sortBy, setSortBy] = useState("date");
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  // vulnerabilities is now imported from the loader

  // Get unique values for filters
  const vulnerabilityTypes = [...new Set(vulnerabilities.map(v => v.vulnerability_type))];
  const statuses = [...new Set(vulnerabilities.map(v => v.status))];

  // Filter and sort vulnerabilities
  const filteredVulnerabilities = useMemo(() => {
    let filtered = vulnerabilities.filter(vuln => {
      const matchesSearch = searchTerm === "" || 
        vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        vuln.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        vuln.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase())) ||
        vuln.affected_systems.some(system => system.toLowerCase().includes(searchTerm.toLowerCase())) ||
        vuln.discovered_by.toLowerCase().includes(searchTerm.toLowerCase()) ||
        vuln.vulnerability_type.toLowerCase().includes(searchTerm.toLowerCase());
      
      const matchesSeverity = selectedSeverity === "all" || vuln.severity === selectedSeverity;
      const matchesType = selectedType === "all" || vuln.vulnerability_type === selectedType;
      const matchesStatus = selectedStatus === "all" || vuln.status === selectedStatus;
      
      return matchesSearch && matchesSeverity && matchesType && matchesStatus;
    });

    // Sort vulnerabilities
    filtered.sort((a, b) => {
      switch (sortBy) {
        case "severity":
          const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
          return severityOrder[b.severity] - severityOrder[a.severity];
        case "cvss":
          return b.cvss_score - a.cvss_score;
        case "date":
        default:
          return new Date(b.disclosure_date).getTime() - new Date(a.disclosure_date).getTime();
      }
    });

    return filtered;
  }, [vulnerabilities, searchTerm, selectedSeverity, selectedType, selectedStatus, sortBy]);

  // Statistics
  const stats = useMemo(() => {
    const total = vulnerabilities.length;
    const critical = vulnerabilities.filter(v => v.severity === "critical").length;
    const high = vulnerabilities.filter(v => v.severity === "high").length;
    
    return { total, critical, high };
  }, [vulnerabilities]);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200";
      case "high": return "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200";
      case "medium": return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200";
      case "low": return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200";
      default: return "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200";
    }
  };

  const handleMobileMenuToggle = () => setIsMobileMenuOpen(!isMobileMenuOpen);
  const handleMobileMenuClose = () => setIsMobileMenuOpen(false);

  return (
    <>
      <Helmet>
        <title>Agentic Vulnerability Database (AVD) | AI Security Vulnerabilities Database</title>
        <meta name="description" content="Comprehensive agentic vulnerability database (AVD) with AI security vulnerabilities, prompt injection attacks, RAG poisoning, and supply chain vulnerabilities. Search and discover agentic vulnerabilities with detailed analysis and remediation guidance." />
        <meta name="keywords" content="agentic vulnerability database, AVD, AI vulnerabilities, agentic security, AI security database, LLM vulnerabilities, prompt injection, RAG poisoning, supply chain attacks, AI threats, agentic vulnerabilities, artificial intelligence security, machine learning vulnerabilities, AI system security, agentic AI security" />
        <meta name="robots" content="index, follow" />
        <link rel="canonical" href="https://agenticsecurity.info/vulnerabilities" />
        
        {/* Open Graph tags */}
        <meta property="og:title" content="Agentic Vulnerability Database (AVD) | AI Security Vulnerabilities" />
        <meta property="og:description" content="Comprehensive agentic vulnerability database with AI security vulnerabilities, detailed analysis, and remediation guidance. Discover prompt injection, RAG poisoning, and supply chain vulnerabilities." />
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://agenticsecurity.info/vulnerabilities" />
        <meta property="og:site_name" content="Agentic Security Hub" />
        <meta property="og:image" content="https://agenticsecurity.info/android-chrome-512x512.png" />
        <meta property="og:image:width" content="512" />
        <meta property="og:image:height" content="512" />
        <meta property="og:image:alt" content="Agentic Vulnerability Database (AVD) - AI Security Vulnerabilities" />
        
        {/* Twitter Card tags */}
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content="Agentic Vulnerability Database (AVD) | AI Security Vulnerabilities" />
        <meta name="twitter:description" content="Comprehensive agentic vulnerability database with AI security vulnerabilities, detailed analysis, and remediation guidance." />
        <meta name="twitter:image" content="https://agenticsecurity.info/android-chrome-512x512.png" />
        <meta name="twitter:image:alt" content="Agentic Vulnerability Database (AVD)" />
        
        {/* Additional SEO tags */}
        <meta name="author" content="OWASP Agentic Security Project" />
        <meta name="publisher" content="OWASP" />
        <meta name="application-name" content="Agentic Vulnerability Database" />
        <meta name="theme-color" content="#2563eb" />
        
        {/* Schema.org structured data */}
        <script type="application/ld+json">
          {JSON.stringify({
            "@context": "https://schema.org",
            "@type": "Dataset",
            "name": "Agentic Vulnerability Database (AVD)",
            "description": "Comprehensive database of disclosed vulnerabilities in AI and agentic systems with detailed analysis, threat mappings, and remediation guidance",
            "url": "https://agenticsecurity.info/vulnerabilities",
            "keywords": ["agentic vulnerabilities", "AI security", "prompt injection", "RAG poisoning", "supply chain attacks", "artificial intelligence vulnerabilities"],
            "creator": {
              "@type": "Organization",
              "name": "OWASP",
              "url": "https://owasp.org"
            },
            "publisher": {
              "@type": "Organization",
              "name": "OWASP Agentic Security Project",
              "url": "https://agenticsecurity.info"
            },
            "license": "https://creativecommons.org/licenses/by-sa/4.0/",
            "dateModified": new Date().toISOString().split('T')[0],
            "inLanguage": "en-US"
          })}
        </script>
      </Helmet>

      <Header 
        onMobileMenuToggle={handleMobileMenuToggle} 
        isMobileMenuOpen={isMobileMenuOpen} 
      />
      
      <SidebarNav 
        type="vulnerabilities" 
        isOpen={isMobileMenuOpen} 
        onClose={handleMobileMenuClose} 
      />

      <section className="py-12 bg-secondary/50 min-h-screen">
        <div className="container px-4 md:px-6">
          {/* Header */}
          <div className="mb-8">
            <div className="flex items-center gap-3 mb-4">
              <h1 className="text-4xl font-bold">Agentic Vulnerability Database (AVD)</h1>
              <span className="px-3 py-1 bg-blue-100 text-blue-800 text-sm font-medium rounded-full">
                Beta
              </span>
            </div>
            <p className="text-muted-foreground text-lg max-w-3xl">
              Comprehensive database of disclosed vulnerabilities in AI and agentic systems. 
              Each vulnerability is mapped to our threat model and mitigation strategies.
            </p>
          </div>

          {/* Statistics Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-2">
                  <Bug className="h-5 w-5 text-primary" />
                  <div>
                    <div className="text-2xl font-bold">{stats.total}</div>
                    <div className="text-xs text-muted-foreground">Total Vulnerabilities</div>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-2">
                  <AlertTriangle className="h-5 w-5 text-red-500" />
                  <div>
                    <div className="text-2xl font-bold text-red-600">{stats.critical}</div>
                    <div className="text-xs text-muted-foreground">Critical Severity</div>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-2">
                  <Shield className="h-5 w-5 text-orange-500" />
                  <div>
                    <div className="text-2xl font-bold text-orange-600">{stats.high}</div>
                    <div className="text-xs text-muted-foreground">High Severity</div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-2">
                  <Target className="h-5 w-5 text-green-500" />
                  <div>
                    <div className="text-lg font-bold text-green-600">CVSS 4.0</div>
                    <div className="text-xs text-muted-foreground">Next-Gen Scoring</div>
                    <a 
                      href="https://www.first.org/cvss/v4-0/" 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="text-xs text-blue-600 hover:text-blue-800 flex items-center gap-1"
                    >
                      Learn More <ExternalLink className="h-3 w-3" />
                    </a>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* AIVSS Coming Soon Section */}
          <Card className="mb-8 border-blue-200 bg-gradient-to-r from-blue-50 to-indigo-50">
            <CardContent className="p-6">
              <div className="flex items-center gap-4">
                <div className="flex-shrink-0">
                  <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                    <Shield className="h-6 w-6 text-blue-600" />
                  </div>
                </div>
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <h3 className="text-lg font-semibold text-blue-900">AI Vulnerability Scoring System (AIVSS)</h3>
                    <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-200">
                      Coming Soon
                    </Badge>
                  </div>
                  <p className="text-blue-700 text-sm mb-3">
                    We're developing a specialized vulnerability scoring system tailored for AI and agentic systems. 
                    AIVSS will provide more accurate risk assessments for AI-specific threats beyond traditional CVSS scoring.
                  </p>
                  <div className="flex items-center gap-6 text-sm text-blue-600">
                    <div className="flex items-center gap-1">
                      <Target className="h-4 w-4" />
                      <span>AI-Specific Metrics</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <AlertTriangle className="h-4 w-4" />
                      <span>Agentic Risk Factors</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <FileText className="h-4 w-4" />
                      <span>Enhanced Documentation</span>
                    </div>
                  </div>
                </div>
                <div className="flex-shrink-0">
                  <Button variant="outline" className="border-blue-300 text-blue-700 hover:bg-blue-100">
                    Learn More
                    <ExternalLink className="h-3 w-3 ml-2" />
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          <Tabs defaultValue="vulnerabilities" className="space-y-6">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
              <TabsTrigger value="submit">Submit Vulnerability</TabsTrigger>
              <TabsTrigger value="statistics">Statistics</TabsTrigger>
            </TabsList>

            <TabsContent value="vulnerabilities" className="space-y-6">
              {/* Search and Filters */}
              <Card>
                <CardContent className="p-4">
                  <div className="flex flex-col lg:flex-row gap-4">
                    <div className="flex-1">
                      <div className="relative">
                        <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                        <Input
                          placeholder="Search vulnerabilities, systems, tags..."
                          value={searchTerm}
                          onChange={(e) => setSearchTerm(e.target.value)}
                          className="pl-10"
                        />
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Select value={selectedSeverity} onValueChange={setSelectedSeverity}>
                        <SelectTrigger className="w-[140px]">
                          <SelectValue placeholder="Severity" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">All Severities</SelectItem>
                          <SelectItem value="critical">Critical</SelectItem>
                          <SelectItem value="high">High</SelectItem>
                          <SelectItem value="medium">Medium</SelectItem>
                          <SelectItem value="low">Low</SelectItem>
                        </SelectContent>
                      </Select>
                      <Select value={selectedType} onValueChange={setSelectedType}>
                        <SelectTrigger className="w-[160px]">
                          <SelectValue placeholder="Type" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">All Types</SelectItem>
                          {vulnerabilityTypes.map(type => (
                            <SelectItem key={type} value={type}>
                              {type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <Select value={sortBy} onValueChange={setSortBy}>
                        <SelectTrigger className="w-[140px]">
                          <SelectValue placeholder="Sort by" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="date">Date</SelectItem>
                          <SelectItem value="severity">Severity</SelectItem>
                          <SelectItem value="cvss">CVSS Score</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Vulnerabilities List */}
              <div className="space-y-4">
                {filteredVulnerabilities.length === 0 ? (
                  <Card>
                    <CardContent className="p-8 text-center">
                      <Bug className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                      <h3 className="text-lg font-semibold mb-2">No vulnerabilities found</h3>
                      <p className="text-muted-foreground">Try adjusting your search criteria or filters.</p>
                    </CardContent>
                  </Card>
                ) : (
                  filteredVulnerabilities.map((vuln) => (
                    <Card key={vuln.id} className="hover:shadow-md transition-shadow">
                      <CardContent className="p-6">
                        <div className="flex flex-col lg:flex-row gap-4">
                          <div className="flex-1">
                            <div className="flex items-start gap-3 mb-3">
                              <div className="flex flex-col gap-2">
                                <div className="flex items-center gap-2">
                                  <Badge variant="outline" className="font-mono text-xs">
                                    {vuln.id}
                                  </Badge>
                                  <Badge className={getSeverityColor(vuln.severity)}>
                                    {vuln.severity.toUpperCase()}
                                  </Badge>
                                  <Badge variant="secondary">
                                    CVSS {vuln.cvss_score}
                                  </Badge>
                                  {vuln.cve_id && (
                                    <Badge variant="outline">
                                      {vuln.cve_id}
                                    </Badge>
                                  )}
                                </div>
                                <h3 className="text-lg font-semibold">{vuln.title}</h3>
                              </div>
                            </div>
                            
                            <p className="text-muted-foreground mb-4 line-clamp-3">
                              {vuln.description}
                            </p>
                            
                            <div className="flex flex-wrap gap-4 text-sm text-muted-foreground mb-4">
                              <div className="flex items-center gap-1">
                                <Calendar className="h-4 w-4" />
                                {new Date(vuln.disclosure_date).toLocaleDateString()}
                              </div>
                              <div className="flex items-center gap-1">
                                <User className="h-4 w-4" />
                                {vuln.discovered_by}
                              </div>
                              <div className="flex items-center gap-1">
                                <Target className="h-4 w-4" />
                                {vuln.vulnerability_type.replace(/_/g, ' ')}
                              </div>
                            </div>

                            <div className="flex flex-wrap gap-2 mb-4">
                              {vuln.affected_systems.slice(0, 3).map((system, idx) => (
                                <Badge key={idx} variant="secondary" className="text-xs">
                                  {system}
                                </Badge>
                              ))}
                              {vuln.affected_systems.length > 3 && (
                                <Badge variant="secondary" className="text-xs">
                                  +{vuln.affected_systems.length - 3} more
                                </Badge>
                              )}
                            </div>

                            <div className="flex flex-wrap gap-1">
                              {vuln.tags.slice(0, 5).map((tag, idx) => (
                                <Badge key={idx} variant="outline" className="text-xs">
                                  {tag}
                                </Badge>
                              ))}
                            </div>
                          </div>
                          
                          <div className="lg:w-64 space-y-3">
                            <div className="grid grid-cols-3 gap-2 text-center">
                              <div className={`p-2 rounded text-xs ${vuln.impact.confidentiality ? 'bg-red-100 text-red-800' : 'bg-gray-100 text-gray-600'}`}>
                                <div className="font-semibold">C</div>
                                <div>{vuln.impact.confidentiality ? 'High' : 'None'}</div>
                              </div>
                              <div className={`p-2 rounded text-xs ${vuln.impact.integrity ? 'bg-red-100 text-red-800' : 'bg-gray-100 text-gray-600'}`}>
                                <div className="font-semibold">I</div>
                                <div>{vuln.impact.integrity ? 'High' : 'None'}</div>
                              </div>
                              <div className={`p-2 rounded text-xs ${vuln.impact.availability ? 'bg-red-100 text-red-800' : 'bg-gray-100 text-gray-600'}`}>
                                <div className="font-semibold">A</div>
                                <div>{vuln.impact.availability ? 'High' : 'None'}</div>
                              </div>
                            </div>
                            
                            <div className="space-y-2">
                              <div className="text-xs text-muted-foreground">
                                <div>Threats: {vuln.threat_mapping.length}</div>
                                <div>Mitigations: {vuln.mitigation_mapping.length}</div>
                              </div>
                            </div>
                            
                            <Link to={`/vulnerabilities/${vuln.id}`}>
                              <Button className="w-full" size="sm">
                                View Details
                                <ExternalLink className="h-3 w-3 ml-2" />
                              </Button>
                            </Link>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))
                )}
              </div>
            </TabsContent>

            <TabsContent value="submit" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="h-5 w-5" />
                    Submit a Vulnerability
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                  <Alert>
                    <AlertTriangle className="h-4 w-4" />
                    <AlertDescription>
                      Please follow responsible disclosure practices. Do not include sensitive customer data or exploit code.
                    </AlertDescription>
                  </Alert>

                  <div className="space-y-6">
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                      <h3 className="font-semibold text-blue-900 mb-2">Submit via GitHub Issue</h3>
                      <p className="text-sm text-blue-700 mb-4">
                        Click the button below to create a new vulnerability disclosure issue on our GitHub repository. 
                        This will open a pre-formatted issue template that you can fill out with the vulnerability details.
                      </p>
                      <Button asChild className="w-full">
                        <a 
                          href="https://github.com/vineethsai/asi/issues/new?labels=vulnerability-disclosure&template=vulnerability_disclosure.md&title=[AVD] Vulnerability Report: " 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="flex items-center justify-center gap-2"
                        >
                          <Github className="h-4 w-4" />
                          Create Vulnerability Report on GitHub
                        </a>
                      </Button>
                    </div>

                    <div className="border-t pt-6">
                      <h3 className="font-semibold mb-4">Alternative: Manual Issue Creation</h3>
                      <p className="text-sm text-muted-foreground mb-4">
                        If the direct link doesn't work, you can manually create an issue with the following template:
                      </p>
                      
                      <div className="bg-gray-50 border rounded-lg p-4">
                        <div className="text-xs font-mono">
                          <div className="mb-2"><strong>Title:</strong> [AVD] Vulnerability Report: [Brief Description]</div>
                          <div className="mb-2"><strong>Labels:</strong> vulnerability-disclosure</div>
                          <div className="mb-4"><strong>Template:</strong></div>
                          <pre className="text-xs whitespace-pre-wrap bg-white border rounded p-3">
{`## Vulnerability Information

**Title:** 
**Discovered By:** 
**Disclosure Date:** 
**Severity:** [Critical/High/Medium/Low]
**CVSS Score:** [0.0-10.0]
**CVE ID:** [If assigned]

## Description

[Detailed description of the vulnerability]

## Affected Systems

- [List affected AI systems, models, or platforms]

## Technical Details

**Vulnerability Type:** [e.g., prompt_injection, rag_poisoning, etc.]
**Attack Vector:** [How the attack is delivered]
**Attack Method:** [Technical explanation]

## Impact Assessment

- [ ] Confidentiality
- [ ] Integrity  
- [ ] Availability

## Proof of Concept

[Brief description of PoC if available]

## References

- [External references, URLs, research papers]

## Tags

[Comma-separated tags for categorization]

---
*This vulnerability report was submitted to the Agentic Vulnerability Database (AVD)*`}
                          </pre>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="statistics" className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Vulnerability Types</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {vulnerabilityTypes.map(type => {
                        const count = vulnerabilities.filter(v => v.vulnerability_type === type).length;
                        const percentage = (count / vulnerabilities.length * 100).toFixed(1);
                        return (
                          <div key={type} className="flex items-center justify-between">
                            <span className="text-sm">{type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}</span>
                            <div className="flex items-center gap-2">
                              <div className="w-20 bg-gray-200 rounded-full h-2">
                                <div 
                                  className="bg-primary h-2 rounded-full" 
                                  style={{ width: `${percentage}%` }}
                                ></div>
                              </div>
                              <span className="text-sm font-medium w-12 text-right">{count}</span>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Severity Distribution</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {['critical', 'high', 'medium', 'low'].map(severity => {
                        const count = vulnerabilities.filter(v => v.severity === severity).length;
                        const percentage = (count / vulnerabilities.length * 100).toFixed(1);
                        return (
                          <div key={severity} className="flex items-center justify-between">
                            <Badge className={getSeverityColor(severity)}>
                              {severity.toUpperCase()}
                            </Badge>
                            <div className="flex items-center gap-2">
                              <div className="w-20 bg-gray-200 rounded-full h-2">
                                <div 
                                  className="bg-primary h-2 rounded-full" 
                                  style={{ width: `${percentage}%` }}
                                ></div>
                              </div>
                              <span className="text-sm font-medium w-12 text-right">{count}</span>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </section>
    </>
  );
};

export default VulnerabilityDatabase; 
import { useState, useEffect } from "react";
import { useParams, Link, useLocation, useNavigate } from "react-router-dom";
import { Helmet } from "react-helmet";
import ReactMarkdown from "react-markdown";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Icon } from "@/components/ui/icon";
import { 
  ArrowLeft, 
  Calendar, 
  User, 
  Target, 
  AlertTriangle, 
  Shield, 
  ExternalLink,
  CheckCircle,
  Info,
  Bug,
  FileText,
  Link as LinkIcon
} from "lucide-react";
import Header from "@/components/layout/Header";
import SidebarNav from "../components/layout/SidebarNav";
import { vulnerabilities, type Vulnerability } from "../lib/vulnerabilityLoader";
import { threatsData, mitigationsData } from "../components/components/securityData";

export const VulnerabilityDetail = () => {
  const { vulnId } = useParams<{ vulnId: string }>();
  const location = useLocation();
  const navigate = useNavigate();
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [activeTab, setActiveTab] = useState("technical");

  const vulnerability = vulnerabilities.find(v => v.id === vulnId);

  // Handle URL hash changes for tab navigation
  useEffect(() => {
    const hash = location.hash.replace('#', '');
    if (['overview', 'technical', 'mappings', 'remediation', 'references'].includes(hash)) {
      setActiveTab(hash);
    } else {
      setActiveTab('overview'); // Default to overview tab
    }
  }, [location.hash, vulnId]);

  const handleTabChange = (tab: string) => {
    setActiveTab(tab);
    // Use React Router's navigate to update the URL with hash
    navigate(`${location.pathname}#${tab}`, { replace: true });
  };

  const handleMobileMenuToggle = () => setIsMobileMenuOpen(!isMobileMenuOpen);
  const handleMobileMenuClose = () => setIsMobileMenuOpen(false);

  if (!vulnerability) {
    return (
      <>
        <Header 
          onMobileMenuToggle={handleMobileMenuToggle} 
          isMobileMenuOpen={isMobileMenuOpen} 
        />
        <div className="container py-12 text-center">
          <h1 className="text-2xl font-bold mb-4">Vulnerability Not Found</h1>
          <Link to="/vulnerabilities">
            <Button>
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Vulnerability Database
            </Button>
          </Link>
        </div>
      </>
    );
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200";
      case "high": return "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200";
      case "medium": return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200";
      case "low": return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200";
      default: return "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200";
    }
  };

  const getPatchStatusColor = (status: string) => {
    switch (status) {
      case "fully_patched": return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200";
      case "partially_fixed": return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200";
      case "mitigated": return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200";
      case "under_investigation": return "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200";
      case "not_patched": return "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200";
      default: return "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200";
    }
  };

  const getReferenceIcon = (type: string) => {
    switch (type) {
      case "blog_post": return FileText;
      case "research_paper": return FileText;
      case "conference_talk": return ExternalLink;
      case "news_article": return FileText;
      case "advisory": return AlertTriangle;
      default: return LinkIcon;
    }
  };

  return (
    <>
      <Helmet>
        <title>{vulnerability.title} | Agentic Vulnerability Database (AVD)</title>
        <meta name="description" content={`${vulnerability.description} Learn about this ${vulnerability.severity} severity agentic vulnerability (${vulnerability.id}) discovered by ${vulnerability.discovered_by}. Includes detailed analysis, threat mappings, and remediation guidance.`} />
        <meta name="keywords" content={`${vulnerability.id}, ${vulnerability.tags.join(', ')}, agentic vulnerability, AI vulnerability, ${vulnerability.vulnerability_type}, ${vulnerability.severity}, ${vulnerability.discovered_by}, agentic security, AI security, prompt injection, RAG poisoning, supply chain attack`} />
        <meta name="robots" content="index, follow" />
        <link rel="canonical" href={`https://agenticsecurity.info/vulnerabilities/${vulnerability.id}`} />
        
        {/* Open Graph tags */}
        <meta property="og:title" content={`${vulnerability.title} | Agentic Vulnerability Database`} />
        <meta property="og:description" content={`${vulnerability.description} ${vulnerability.severity.toUpperCase()} severity agentic vulnerability with CVSS ${vulnerability.cvss_score}.`} />
        <meta property="og:type" content="article" />
        <meta property="og:url" content={`https://agenticsecurity.info/vulnerabilities/${vulnerability.id}`} />
        <meta property="og:site_name" content="Agentic Security Hub" />
        <meta property="og:image" content="https://agenticsecurity.info/android-chrome-512x512.png" />
        <meta property="article:published_time" content={vulnerability.disclosure_date} />
        <meta property="article:modified_time" content={vulnerability.last_updated} />
        <meta property="article:author" content={vulnerability.discovered_by} />
        <meta property="article:section" content="AI Security" />
        <meta property="article:tag" content={vulnerability.tags.join(', ')} />
        
        {/* Twitter Card tags */}
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content={`${vulnerability.title} | AVD`} />
        <meta name="twitter:description" content={`${vulnerability.description} ${vulnerability.severity.toUpperCase()} severity (CVSS ${vulnerability.cvss_score})`} />
        <meta name="twitter:image" content="https://agenticsecurity.info/android-chrome-512x512.png" />
        
        {/* Additional SEO tags */}
        <meta name="author" content={vulnerability.discovered_by} />
        <meta name="dcterms.created" content={vulnerability.disclosure_date} />
        <meta name="dcterms.modified" content={vulnerability.last_updated} />
        <meta name="dcterms.subject" content={`Agentic Vulnerability ${vulnerability.id}`} />
        
        {/* Schema.org structured data */}
        <script type="application/ld+json">
          {JSON.stringify({
            "@context": "https://schema.org",
            "@type": "Report",
            "name": vulnerability.title,
            "description": vulnerability.description,
            "identifier": vulnerability.id,
            "url": `https://agenticsecurity.info/vulnerabilities/${vulnerability.id}`,
            "datePublished": vulnerability.disclosure_date,
            "dateModified": vulnerability.last_updated,
            "author": {
              "@type": "Person",
              "name": vulnerability.discovered_by
            },
            "publisher": {
              "@type": "Organization",
              "name": "OWASP Agentic Security Project",
              "url": "https://agenticsecurity.info"
            },
            "about": {
              "@type": "Thing",
              "name": "Agentic AI Security Vulnerability",
              "description": `${vulnerability.vulnerability_type} vulnerability affecting ${vulnerability.affected_systems.join(', ')}`
            },
            "keywords": vulnerability.tags.join(', '),
            "inLanguage": "en-US",
            "isPartOf": {
              "@type": "Dataset",
              "name": "Agentic Vulnerability Database",
              "url": "https://agenticsecurity.info/vulnerabilities"
            }
          })}
        </script>
      </Helmet>

      <Header 
        onMobileMenuToggle={handleMobileMenuToggle} 
        isMobileMenuOpen={isMobileMenuOpen} 
      />
      
      <SidebarNav 
        type="vulnerabilities" 
        isOpen={isMobileMenuOpen} 
        onClose={handleMobileMenuClose} 
      />

      <section className="py-12 bg-secondary/50 min-h-screen">
        <div className="container px-4 md:px-6">
          <div className="mb-6">
            <Link to="/vulnerabilities" className="inline-flex items-center text-muted-foreground hover:text-foreground mb-4">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Vulnerability Database
            </Link>
          </div>

          {/* Header Card */}
          <Card className="mb-6">
            <CardContent className="p-6">
              <div className="flex flex-col lg:flex-row gap-6">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-4">
                    <Badge variant="outline" className="font-mono">
                      {vulnerability.id}
                    </Badge>
                    <Badge className={getSeverityColor(vulnerability.severity)}>
                      {vulnerability.severity.toUpperCase()}
                    </Badge>
                    <Badge variant="secondary">
                      CVSS {vulnerability.cvss_score}
                    </Badge>
                    {vulnerability.cve_id && (
                      <Badge variant="outline">
                        {vulnerability.cve_id}
                      </Badge>
                    )}
                  </div>
                  
                  <h1 className="text-3xl font-bold mb-4">{vulnerability.title}</h1>
                  <p className="text-muted-foreground text-lg mb-6">{vulnerability.description}</p>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                    <div className="flex items-center gap-2">
                      <Calendar className="h-4 w-4 text-muted-foreground" />
                      <span>Disclosed: {new Date(vulnerability.disclosure_date).toLocaleDateString()}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <User className="h-4 w-4 text-muted-foreground" />
                      <span>By: {vulnerability.discovered_by}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Target className="h-4 w-4 text-muted-foreground" />
                      <span>Type: {vulnerability.vulnerability_type.replace(/_/g, ' ')}</span>
                    </div>
                  </div>
                </div>
                
                <div className="lg:w-80">
                  <div className="space-y-4">
                    {/* Scoring */}
                    <div>
                      <h3 className="font-semibold mb-3">Vulnerability Scoring</h3>
                      <div className="space-y-3">
                        <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                          <div>
                            <div className="font-semibold text-blue-800">CVSS Score</div>
                            <div className="text-xs text-blue-600">Common Vulnerability Scoring System</div>
                          </div>
                          <div className="text-2xl font-bold text-blue-800">{vulnerability.cvss_score}</div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Tabs value={activeTab} onValueChange={handleTabChange} className="space-y-6">
            <TabsList className="grid w-full grid-cols-5">
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="technical">Technical Details</TabsTrigger>
              <TabsTrigger value="mappings">Threat Mappings</TabsTrigger>
              <TabsTrigger value="remediation">Remediation</TabsTrigger>
              <TabsTrigger value="references">References</TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="h-5 w-5" />
                    Detailed Analysis
                  </CardTitle>
                </CardHeader>
                <CardContent className="prose prose-slate max-w-none dark:prose-invert">
                  <ReactMarkdown>{vulnerability.content}</ReactMarkdown>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="technical" className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Bug className="h-5 w-5" />
                      Vulnerability Details
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <h4 className="font-semibold mb-2">Attack Method</h4>
                      <p className="text-sm text-muted-foreground">{vulnerability.technical_details.attack_method}</p>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <h4 className="font-semibold mb-1">Complexity</h4>
                        <Badge variant="secondary">{vulnerability.technical_details.exploitation_complexity}</Badge>
                      </div>
                      <div>
                        <h4 className="font-semibold mb-1">User Interaction</h4>
                        <Badge variant="secondary">{vulnerability.technical_details.user_interaction}</Badge>
                      </div>
                    </div>
                    
                    <div>
                      <h4 className="font-semibold mb-1">Scope</h4>
                      <Badge variant="secondary">{vulnerability.technical_details.scope}</Badge>
                    </div>
                    
                    <div>
                      <h4 className="font-semibold mb-1">Attack Vector</h4>
                      <Badge variant="outline">{vulnerability.attack_vector.replace(/_/g, ' ')}</Badge>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Affected Systems</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      {(vulnerability.affected_systems || []).map((system, idx) => (
                        <div key={idx} className="flex items-center gap-2 p-2 bg-muted rounded">
                          <Target className="h-4 w-4 text-muted-foreground" />
                          <span className="text-sm">{system}</span>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                {vulnerability.proof_of_concept?.available && (
                  <Card className="lg:col-span-2">
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <FileText className="h-5 w-5" />
                        Proof of Concept
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <Alert>
                        <Info className="h-4 w-4" />
                        <AlertDescription>
                          {vulnerability.proof_of_concept?.description || 'Proof of concept details not available.'}
                        </AlertDescription>
                      </Alert>
                    </CardContent>
                  </Card>
                )}
              </div>
            </TabsContent>

            <TabsContent value="mappings" className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Threat Mappings */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <AlertTriangle className="h-5 w-5 text-red-500" />
                      Mapped Threats
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    {(vulnerability.threat_mapping || []).length > 0 ? (
                      <div className="space-y-2">
                        {(vulnerability.threat_mapping || []).map(threatId => {
                          const threat = threatsData[threatId];
                          return threat ? (
                            <Link key={threatId} to={`/threats/${threatId}`}>
                              <div className="p-3 border rounded hover:bg-muted transition-colors">
                                <div className="flex items-center gap-2">
                                  {threat.icon && <Icon name={threat.icon} size={16} />}
                                  <span className="font-medium text-sm">{threat.name}</span>
                                </div>
                                <p className="text-xs text-muted-foreground mt-1 line-clamp-2">
                                  {threat.description}
                                </p>
                              </div>
                            </Link>
                          ) : null;
                        })}
                      </div>
                    ) : (
                      <p className="text-muted-foreground text-sm">No threat mappings available.</p>
                    )}
                  </CardContent>
                </Card>



                {/* Mitigation Mappings */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Shield className="h-5 w-5 text-green-500" />
                      Mitigations
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    {(vulnerability.mitigation_mapping || []).length > 0 ? (
                      <div className="space-y-2">
                        {(vulnerability.mitigation_mapping || []).map(mitigationId => {
                          const mitigation = mitigationsData[mitigationId];
                          return mitigation ? (
                            <Link key={mitigationId} to={`/controls/${mitigationId}`}>
                              <div className="p-3 border rounded hover:bg-muted transition-colors">
                                <div className="flex items-center gap-2">
                                  <Badge variant="outline" className="text-xs">{mitigationId}</Badge>
                                </div>
                                <p className="text-sm font-medium mt-1">{mitigation.name}</p>
                                <p className="text-xs text-muted-foreground mt-1 line-clamp-2">
                                  {mitigation.description}
                                </p>
                              </div>
                            </Link>
                          ) : null;
                        })}
                      </div>
                    ) : (
                      <p className="text-muted-foreground text-sm">No mitigation mappings available.</p>
                    )}
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="remediation" className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Vendor Response</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm">{vulnerability.remediation?.vendor_response || 'No vendor response available.'}</p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Workarounds</CardTitle>
                  </CardHeader>
                  <CardContent>
                    {(vulnerability.remediation?.workarounds || []).length > 0 ? (
                      <ul className="space-y-2">
                        {(vulnerability.remediation?.workarounds || []).map((workaround, idx) => (
                          <li key={idx} className="flex items-start gap-2">
                            <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                            <span className="text-sm">{workaround}</span>
                          </li>
                        ))}
                      </ul>
                    ) : (
                      <p className="text-muted-foreground text-sm">No workarounds documented.</p>
                    )}
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="references" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>External References</CardTitle>
                </CardHeader>
                <CardContent>
                  {(vulnerability.references || []).length > 0 ? (
                    <div className="space-y-3">
                      {(vulnerability.references || []).map((ref, idx) => {
                        const IconComponent = getReferenceIcon(ref?.type || 'other');
                        return (
                          <a
                            key={idx}
                            href={ref?.url || '#'}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center gap-3 p-3 border rounded hover:bg-muted transition-colors"
                          >
                            <IconComponent className="h-5 w-5 text-muted-foreground" />
                            <div className="flex-1">
                              <div className="font-medium">{ref?.title || 'Untitled Reference'}</div>
                              <div className="text-xs text-muted-foreground">
                                {ref?.type ? ref.type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) : 'Other'}
                              </div>
                            </div>
                            <ExternalLink className="h-4 w-4 text-muted-foreground" />
                          </a>
                        );
                      })}
                    </div>
                  ) : (
                    <p className="text-muted-foreground">No external references available.</p>
                  )}
                </CardContent>
              </Card>
            </TabsContent>


          </Tabs>

          {/* Tags */}
          <Card className="mt-6">
            <CardContent className="p-4">
              <h3 className="font-semibold mb-3">Tags</h3>
              <div className="flex flex-wrap gap-2">
                {(vulnerability.tags || []).map((tag, idx) => (
                  <Badge key={idx} variant="outline">
                    {tag}
                  </Badge>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </section>
    </>
  );
};

export default VulnerabilityDetail; 